class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> mp;
        
        for(auto var:wordList) mp.insert(var);
        if(mp.find(endWord)==mp.end()) return 0;
        wordList.clear();
        queue<string> q;
        q.push(beginWord);
        int depth=1;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                auto temp=q.front();
                q.pop();
                
                for(int i=0;i<temp.size();i++){
                    string cal=temp;
                    for(char c='a';c<='z';c++){
                        if(cal[i]==c) continue;
                        cal[i]=c;
                        if(cal==endWord) return depth+1;
                        if(mp.find(cal)!=mp.end()){
                            q.push(cal);
                            mp.erase(cal);
                        }
                    }
                }
            }
            depth++;
        }
        return 0;
    }
};
