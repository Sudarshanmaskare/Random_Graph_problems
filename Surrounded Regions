Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.


class Solution {
public:
    int n,m;
    void dfs(vector<vector<char>> &board,int i,int j){
        if(i<0 || j<0 || i>=n || j>=m || board[i][j]!='O') return;
        board[i][j]='#';
        dfs(board,i+1,j);
         dfs(board,i-1,j); dfs(board,i,j+1); dfs(board,i,j-1);
        
    }
    void solve(vector<vector<char>>& board) {
        n=board.size(),m=board[0].size();
        
        for(int i=0;i<n;i++){
            if(board[i][0]=='O') dfs(board,i,0);
             if(board[i][m-1]=='O') dfs(board,i,m-1);
            
        }
          for(int j=0;j<m;j++){
            if(board[0][j]=='O') dfs(board,0,j);
             if(board[n-1][j]=='O') dfs(board,n-1,j);  
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='#'){
                    board[i][j]='O';
                }
                else{
                    board[i][j]='X';
                }
            }
        }
        
        
    }
};
