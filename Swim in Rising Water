class Solution {
public:
    int dx[4]={1,0,0,-1};
    int dy[4]={0,-1,1,0};
    int swimInWater(vector<vector<int>>& grid) {
        int n=grid.size();
        if(n==1){
            return grid[0][0];
        }
        
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;
        
        
        vector<vector<bool>> vis(n,vector<bool>(n,false));
        vis[0][0]=true;
        
        int ans=max(grid[0][0],grid[n-1][n-1]);
        pq.push({ans,0,0});
        while(pq.size()){
            auto temp=pq.top();
            ans=max(ans,temp[0]);
            pq.pop();
            
            int val=temp[0],x=temp[1],y=temp[2];
            
            for(int k=0;k<4;k++){
                int nx=dx[k]+x,ny=dy[k]+y;
                
                if(nx<0 || ny<0 || nx>=n || ny>=n || vis[nx][ny]) continue;
                if(nx==n-1 && ny==n-1) return ans;
                
                vis[nx][ny]=true;
                pq.push({grid[nx][ny],nx,ny});
           
            }
            
        }
        return -1;
    }
};
