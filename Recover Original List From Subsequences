void dfs(int node,vector<int> &temp,vector<bool> &vis,vector<int> graph[]){
    vis[node]=true;
    for(auto var:graph[node]){
        if(!vis[var]){
             dfs(var,temp,vis,graph);
        }
    }
    temp.push_back(node);
}

vector<int> solve(vector<vector<int>>& lists) {
   

    int maxi=0;
    unordered_set<int> mp;

    for(auto var:lists){
        for(auto cal:var){
            maxi=max(maxi,cal);
            mp.insert(cal);
        } 
    }

    vector<int> graph[maxi+1];
    vector<bool> vis(maxi+1,false);

    vector<int> ans;

    vector<int> temp;

    for(auto var:lists){

        for(int i=1;i<var.size();i++){
            graph[var[i-1]].push_back(var[i]);
        }
    }

    for(int i=0;i<=maxi;i++){
        if(!vis[i] && mp.find(i)!=mp.end()){
            dfs(i,temp,vis,graph);
        }
    }
    reverse(temp.begin(),temp.end());
    return temp;

}
