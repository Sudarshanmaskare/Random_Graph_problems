class Solution {
public:
    unordered_map<int,int> mp;
    int largestIsland(vector<vector<int>>& grid) {
        
        int k=2;
        int n=grid.size(),m=grid[0].size();
         int maxarea=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    // grid[i][j]=k;
                    mp[k]=dfs(grid,i,j,n,m,k);
                    maxarea=max(maxarea,mp[k]);
                    k++;
                }
            }
        }
        
       
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==0){
                    unordered_set<int> vis;
                    if(i-1>=0) vis.insert(grid[i-1][j]);
                    if(i+1<n) vis.insert(grid[i+1][j]);
                    if(j-1>=0) vis.insert(grid[i][j-1]);
                    if(j+1<n) vis.insert(grid[i][j+1]);
                    
                    int total=1;
                    
                    for(auto var:vis) total+=mp[var];
                    maxarea=max(maxarea,total);
                }
            }
        }
        return maxarea;
    }
    int dfs(vector<vector<int>> &grid,int i,int j,int n,int m,int k){
        if(i<0 || j<0 || i>=n || j>=m || grid[i][j]!=1) return 0;
        grid[i][j]=k;
        return 1+dfs(grid,i+1,j,n,m,k)+dfs(grid,i-1,j,n,m,k)+dfs(grid,i,j+1,n,m,k)+dfs(grid,i,j-1,n,m,k);
    }
};
