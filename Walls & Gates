You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 2^31 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a Gate, that room should remain filled with INF


class Solution {
public:
    /**
     * @param rooms: m x n 2D grid
     * @return: nothing
     */
     int INF=2147483647;
    void wallsAndGates(vector<vector<int>> &rooms) {
        // write your code here
        int n=rooms.size(),m=rooms[0].size();
        if(n==0) return;
        queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(rooms[i][j]==0){
                    q.push({i,j});
                }
            }
        }

        int dx[4]={1,0,-1,0};
        int dy[4]={0,-1,0,1};
        while(!q.empty()){
            auto temp=q.front();
            q.pop();

            for(int k=0;k<4;k++){
                int x=temp.first+dx[k],y=temp.second+dy[k];
                if(x>=0 && x<n && y>=0 && y<m){
                    if(rooms[x][y]==INF){
                        rooms[x][y]=rooms[temp.first][temp.second]+1;
                        q.push({x,y});
                    }
                }
        }
            
        }
    }
};
